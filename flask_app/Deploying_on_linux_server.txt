                            _______________________________________ 
                             SETTING UP THE SERVER FOR DEPLOYMENT
#================================================================================================
                                            Step 1. 
#=================================================================================================
create linode :
            choose image:
            choose Region:
            choose plan:
                  linode label: flask_server
                    add root password:
                    optional add-ons
                    --create the server--

#================================================================================================
                                            Step 2. 
#=================================================================================================

got to Networking :
                Note down the  SSH Access ip address
                -paste the ssh command on the bash/terminal: type root password (open the two terminal one for local host and one for server)
                                   : ssh root@45.33.123.214

                 (update and upgrade the machine/server)
                 :  then- set -hostname:
                               ~#  hostnamectl set-hostname flask_server
                               ~# hostname
                                         flask_server

                   (Setting up the host name in hostfile:
                               ~#  nano /etc/hosts

                |------------------------------------------------------------------------------|
                 GNU nano              /etc/hosts                                     Modified |
                ________________________________________________________________________________ 
                 127.0.0.1         localhost
                 45.33.123.214     flask_server                                                                                            




                |  ^X(exit)    ...     ....   ...                                              |                            
                |------------------------------------------------------------------------------|  

#================================================================================================
                                            Step 3. 
#=================================================================================================
Adding the limited users to our machine, as loged in as root user , which has priviliged to run any command:
                             
                        root@localhost:~#        adduser user1
                        root@localhost:~#        type password :
                                                     confirm_ pass and add additonla info
                        #add user to group:
                                root@localhost:~#    adduser user1 sudo 
                        (now logout as root and login as user1 )
                                                : logout
                                                :ssh user1@ 45.33.123.214 
#in aws no not required above step because you are login as ubuntu which is not a root 
#================================================================================================
                                            Step 4. 
#=================================================================================================
 Adding the ssh authentication key instead of the password bcz. it can't be brute froced
 #1 make a .ssh directory within home directory
                                       :~$  mkdir .ssh
 #2. now open the terminal with the local machine, (can open terminal where  app environment is enabled)

                                      ~$   ssh-keygen -b 4096
                                      (generating public/private key pair)  
                                      (/.ssh/id_rsa.pub)            

#3. Moving the public key to server on bash use 'scp' command:
                                       $  scp ~/.shh?id_rsa.pub user1@45.33.123.214:~.ssh/authrized_keys 
                                         (saving it on user1's home directory)

                                    check the key on server terminal
                                       $  ls .ssh

# 4. setting the permission for the ssh directory, where owner of directory has the read write permissions:

                                     $ sudo chmod 700 ~/.ssh/
                                     $ password for user1:
                                     $ sudo chmod 600 ~/.ssh*

                                     exit()

   #700 permission: 7read/write, 0 for group - 0 permission, 0- for others                                     
 # on a local machine signing using the ssh key: 
                                          ssh user1@45.33.123.214

#================================================================================================
                                            Step 5. 
#=================================================================================================
# dis-allowing the root login in ssh :
                                    $ sudo nano /etc/ssh/sshd_config
                                
                |------------------------------------------------------------------------------|
                 GNU nano 2.9.8             /etc/ssh/sshd_config                      Modified |
                ________________________________________________________________________________ 
                  
                  #scroll down and change the permission on permitlogin root and uncomment password authentication phrase

                  PermitRootLogin         no
                  PasswordAuthentication  no



                |  ^X(exit)    ...     ....   ...                                              |                            
                |------------------------------------------------------------------------------|  

#restrat the ssh server by using :
                            $  sudo systemctl restrat sshd_config   
                                            
#================================================================================================
                                            Step 6. 
#=================================================================================================

#Setting up the firewall 
                        $ sudo apt install ufw  
                         (uncomplicated fire-wall)

#change policies like allow incoming traffic:

                              $ sudo ufw default allow outgoing 
                              $ sudo ufw default deny incoming
                           
# configuring the allow rule for certain ports:
                              $ sudo ufw allow ssh
                              (allow port for the ssh ) 
                              $ sudo ufw allow 5000
                              (allow server for port 5000 to run flask before deploy.)

# alow port 80 and http traffic after every thing is working as wanted 

# enable the avobe rules and traffic :
                               $ sudo ufw enable

                               $ suod ufw status
______________________________________________________________________________________________________
  
                                     _____________________________ 
                                     PUTTING THE APP ON THE SERVER                              
#================================================================================================
                                            Step . 1
#=================================================================================================

# simply can git clone the repositry on the server

# In command line  on local machine using the bash:

#(1) using the virtual environment so make the requirement.txt , (see the dependecies by pip freeze)
  
#2. create requirement.txt and put inside the project directory:
                           $ pip freeze > requirement.txt
 
#3. Moving the project directory on the server in user1 home dir.:
                          $ scp -r Desktop/flask_app user1@45.123.214:/ 

#4. checking that it is on the server, go on the server terminal:
                                       $ ls (see the dir.)        


#================================================================================================
                                            Step . 2
#=================================================================================================

#creating the virtual environment on the server:
 #(1) 1. Install python 3 ,and Install python venv to create virtual environment:

                                          $ sudo apt install python3 -pip 
                                          $ sudo apt install python3 -venv

 #2. create the virtual environment inside the flask project with desired dir. location:

                                          $ python3 -m venv flask_app/venv
                                          $ cd flask_app
                                          $ ls

#3. Activating the virtual environment :

                     user1@flask_server:-/flask_app $ source venv/bin/activate
              (venv) user1@flask_server:-/flask_app $    .

#4. Then installing the requirement.txt dependecies:
                                                  $ pip install -r requirement.txt 
                                                  (installed all the packages)

#================================================================================================
                                            Step . 3
#================================================================================================= 

#Setting up the environment variables on the servers:
 #for this we will create the config file and load that into application insted of environment variables

#1. getting the environment variables in flask_environment running using the python:
                                 $ python
                                 >>> import os 
                                 >>> os.environ.get('SECRET_KEY')
                                 '....................'  
                                 >>> os.environ.get('SQLALCHEMYDATABASE_URI')
                                 'sqlite:///site.db' 
                                 >>> os.environ.get('EMAIL_USER')
                                 'myemail@gmail.com' 
                                 >>> os.environ.get('EMAIL_PASS')
                                 'MYPASS@123' 

#2. create the file for configuration using /config.json or .yml:
                                $ touch config.json                                                                



                                  





______________________________________________________________________________________________________
  
          ________________________________________________________ 
     using the  engine-x and G-unicorn SERVER or WSGI server for production deployment                             
#================================================================================================
                                            Step . 1
#=================================================================================================

sudo apt install nginx

pip install gunicorn


#updating the config file for the nginx 
nginx will be the web server  will hnlde the static file , html, css 
and G unicorn will handle the python file

#removing the default nginx
sudo rm /etc/nginx/sites-enabled/default

# Adding the file 
 sudo nano /etc/nginx/sites-enabled/flaskblog


server{ 
       listen 80; 
       server_name 52.66.25.191;

       location /static {
               alias /home/ubuntu/web_app_flask/flask_app/blog_app/static;
       } 

       location / { 
              proxy_pass http://localhost:8000;
              include /etc/nginx/proxy_params;
              proxy_redirect off;
       }
}

sudo ufw allow http/tcp


sudo ufw delete allow 5000
sudo ufw allow  enable 

#restart the nginx 
sudo systemctl restart nginx


#running the gunicorn 
gunicorn -w 31 run:app

#here -w is worker , which should be : Number of worker should be- (2 * num_cores)+1 

#see the number of cores on linux 
nproc --all
